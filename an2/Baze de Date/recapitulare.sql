-- ---Campionat de Table

-- create table Angajat(
--     id INT PRIMARY KEY,
--     nume VARCHAR(100),
--     nr_contract VARCHAR(100)
-- )

-- CREATE TABLE Masa(
--     id INT PRIMARY KEY,
--     culoare VARCHAR(20)
-- )

-- create table Meci(
--     id INT PRIMARY KEY,
--     jucator1 INT,
--     jucator2 INT,
--     data DATETIME,
--     masa INT,

--     CONSTRAINT jucator1_fk FOREIGN KEY (jucator1) REFERENCES Angajat(id), 
--     CONSTRAINT jucator2_fk FOREIGN KEY (jucator2) REFERENCES Angajat(id),
--     CONSTRAINT masa_fk FOREIGN KEY (masa) REFERENCES Masa(id),

--     id_castigator INT FOREIGN KEY REFERENCES Angajat(id)
-- )

-- CREATE TABLE Mutare(
--     id int PRIMARY KEY,
--     meci INT,
--     jucator INT,
--     valoare1 INT,
--     valoare2 INT,
--     piesa_mutata_de_la VARCHAR(20),
--     piesa_mutata_la VARCHAR(20),
--     CONSTRAINT jucator_fk FOREIGN KEY (jucator) REFERENCES Angajat(id), 
--     CONSTRAINT meci_fk FOREIGN KEY (meci) REFERENCES Meci(id)
-- )

-- CREATE TABLE Spectator(
--     meci INT FOREIGN KEY REFERENCES Meci(id),
--     angajat INT FOREIGN KEY REFERENCES Angajat(id),
--     CONSTRAINT pk PRIMARY KEY (angajat, meci)
-- )

-- GO
-- CREATE PROCEDURE PREMIU @PARTICIPAT INT
-- AS
--     DECLARE @CASTIGATE INT;
--     DECLARE @SPECTATORI INT;
--     DECLARE @MECIURINEVAZUTE INT;
--     SET @CASTIGATE = (SELECT count(*) from Meci where id_castigator = @PARTICIPAT)
--     SET @SPECTATORI = 
--     (SELECT COUNT(*) 
--     FROM Spectator 
--     JOIN Meci on Spectator.meci = Meci.id
--     where Meci.jucator1 = @PARTICIPAT or Meci.jucator2 = @PARTICIPAT and not Spectator.angajat = @PARTICIPAT)
--     SET @MECIURINEVAZUTE = (SELECT COUNT(*) 
--     FROM MECI WHERE NOT jucator1 = @PARTICIPAT or not jucator2 = @PARTICIPAT)
--     set @MECIURINEVAZUTE = @MECIURINEVAZUTE - (SELECT COUNT(*) FROM Spectator WHERE angajat = @PARTICIPAT)

--     DECLARE @puncte INT;
--     set @puncte = @CASTIGATE * 100 + @SPECTATORI * 10 - @MECIURINEVAZUTE * 10;
--     if @puncte < 0
--         BEGIN
--             SET @puncte = 0;
--         END

-- GO
-- create VIEW view_duble AS
--     SELECT Count(*) as Duble FROM Mutare
--     join Angajat on Mutare.jucator = Angajat.id
--     WHERE valoare1 = valoare2 and jucator like 'CLF3215';

-- GO
-- SELECT COUNT(*) from view_duble








-- --- Restaurant Samsara
-- CREATE TABLE COMANDA(
--     ID INT PRIMARY KEY IDENTITY(1, 1),
--     ADRESA VARCHAR(150),
--     DATA_C DATETIME,
--     CLIENT INT FOREIGN KEY REFERENCES CLIENT(ID)
-- )

-- CREATE TABLE CLIENT(
--     ID INT PRIMARY KEY IDENTITY(1, 1),
--     NUME VARCHAR(50),
--     TELEFON VARCHAR(15)
-- )

-- CREATE TABLE PREPARAT(
--     ID INT PRIMARY KEY IDENTITY(1, 1),
--     DENUMIRE VARCHAR(100),
--     CANTITATE INT,
--     PRET FLOAT
-- )

-- CREATE TABLE INGREDIENT(
--     ID INT PRIMARY KEY IDENTITY(1, 1),
--     DENUMIRE VARCHAR(100),
--     CALORII INT
-- )

-- CREATE TABLE COMANDA_PREPARAT(
--     ID_C INT FOREIGN KEY REFERENCES COMANDA(ID),
--     ID_P INT FOREIGN KEY REFERENCES PREPARAT(ID),
--     CONSTRAINT PK_CP PRIMARY KEY (ID_C, ID_P)
-- )

-- CREATE TABLE PREPARAT_INGREDIENT(
--     ID_I INT FOREIGN KEY REFERENCES INGREDIENT(ID),
--     ID_P INT FOREIGN KEY REFERENCES PREPARAT(ID),
--     CONSTRAINT PK_PI PRIMARY KEY (ID_I, ID_P)
-- )

-- GO
-- CREATE OR ALTER PROCEDURE STERGERE @INGREDIENT VARCHAR(100)
-- AS
--     DECLARE @ID_INGREDIENT INT;
--     DECLARE @COMENZIS INT;

--     SELECT @ID_INGREDIENT = ID FROM INGREDIENT WHERE DENUMIRE = @INGREDIENT;
--     SELECT @COMENZIS = COUNT(DISTINCT COMANDA.ID) FROM PREPARAT_INGREDIENT 
--     JOIN PREPARAT ON PREPARAT.ID = PREPARAT_INGREDIENT.ID_P
--     JOIN COMANDA_PREPARAT ON COMANDA_PREPARAT.ID_P = PREPARAT.ID
--     WHERE PREPARAT_INGREDIENT.ID_I = @ID_INGREDIENT

--     DELETE FROM COMANDA_PREPARAT WHERE COMANDA_PREPARAT.ID_P IN 
--     (SELECT COMANDA_PREPARAT.ID_C FROM COMANDA_PREPARAT.ID_P
--     JOIN PREPARAT ON COMANDA_PREPARAT.ID_P = PREPARAT.ID
--     JOIN PREPARAT_INGREDIENT ON PREPARAT_INGREDIENT.ID_P = PREPARAT.ID
--     JOIN INGREDIENT ON INGREDIENT.ID = PREPARAT_INGREDIENT.ID_I
--     WHERE INGREDIENT.ID = @ID_INGREDIENT)

--     DELETE FROM PREPARAT WHERE PREPARAT.ID NOT IN
--     (SELECT PREPARAT.ID FROM COMANDA_PREPARAT
--     JOIN PREPARAT ON COMANDA_PREPARAT.ID_C = PREPARAT.ID)

--     RETURN @COMENZIS

-- GO
-- CREATE OR ALTER VIEW COMEZICLIENT
-- AS
--     SELECT COMANDA.DATA AS [DATA COMANDA], SUM(PREPARAT.PRET) AS [SUMA ACHITATA] FROM CLIENT 
--     JOIN COMANDA ON COMANDA.CLIENT = CLIENT.ID
--     JOIN COMANDA_PREPARAT ON COMANDA_PREPARAT.ID_C = COMANDA.ID
--     JOIN PREPARAT ON PREPARAT.ID_P = COMANDA_PREPARAT.ID_P
--     WHERE CLIENT.NUME LIKE 'Bogdan Ioan'
--     GROUP BY COMANDA.ID, COMANDA.DATA_C






--CALEIDOSCOP
-- CREATE TABLE EPISOD(
--     ID INT PRIMARY KEY IDENTITY(1, 1),
--     DURATA INT,
--     NUME NVARCHAR(50),
--     ORDINE INT
-- )

-- CREATE TABLE UTILIZATOR(
--     ID INT PRIMARY KEY IDENTITY(1,1),
--     NUME NVARCHAR(50),
--     EMAIL NVARCHAR(50)
-- )

-- CREATE TABLE ACTOR(
--     ID INT PRIMARY KEY IDENTITY(1,1),
--     NUME NVARCHAR(50),
-- )


-- CREATE TABLE VIZIONARI(
--     ID_E INT FOREIGN KEY REFERENCES EPISOD(ID),
--     ID_U INT FOREIGN KEY REFERENCES UTILIZATOR(ID),
--     CONSTRAINT PK_EU PRIMARY KEY (ID_E, ID_U)
-- )

-- CREATE TABLE REPLICI(
--     ID INT PRIMARY KEY IDENTITY(1,1),
--     ID_E INT FOREIGN KEY REFERENCES EPISOD(ID),
--     ID_A INT FOREIGN KEY REFERENCES ACTOR(ID),
--     SCRIPT NVARCHAR(100),
--     MOMENT INT
-- )

-- GO
-- CREATE OR ALTER PROCEDURE PLAY @USER NVARCHAR(50)
-- AS
--     DECLARE @ID_USER INT;
--     DECLARE @NRVIZIONARI INT;
--     SELECT @ID_USER = UTILIZATOR.ID FROM UTILIZATOR WHERE UTILIZATOR.NUME = @USER;
--     SELECT @NRVIZIONARI = COUNT(*) FROM VIZIONARI WHERE VIZIONARI.ID_U = @ID_USER;

--     IF @NRVIZIONARI = 8
--     BEGIN
--         INSERT INTO VIZIONARI(ID_U, ID_E) VALUES (@ID_USER, 9);
--         RETURN;
--     END

--     DECLARE @EPISOD INT;
--     SET @EPISOD = FLOOR(RAND() * 10);
--     IF @EPISOD = 0
--     BEGIN
--         SET @EPISOD = 1;
--     END
--     IF @EPISOD = 9
--     BEGIN
--         SET @EPISOD = 8;
--     END


--     WHILE EXISTS(SELECT * FROM VIZIONARI 
--     WHERE VIZIONARI.ID_U = @ID_USER AND VIZIONARI.ID_E = @EPISOD)
--     BEGIN
--         SET @EPISOD = FLOOR(RAND() * 10);
--         IF @EPISOD = 0
--         BEGIN
--             SET @EPISOD = 1;
--         END
--         IF @EPISOD = 9
--         BEGIN
--             SET @EPISOD = 8;
--     END

--     INSERT INTO VIZIONARI(ID_U, ID_E) VALUES (@ID_USER, @EPISOD);
-- END


-- GO
-- CREATE VIEW REPLICISERIAL
-- AS 
--     SELECT ACTOR.NUME + ': ' + REPLICI.SCRIPT AS ['SCRIPT'] FROM EPISOD 
--     JOIN REPLICI ON EPISOD.ID = REPLICI.ID_E 
--     JOIN ACTOR ON REPLICI.ID_A = ACTOR.ID
--     ORDER BY EPISOD.ORDINE, REPLICI.MOMENT
-- go

